using System.Collections;
using UnityEngine;

// 총을 구현한다
public class Punch : MonoBehaviour
{
    //총의 상태를 표현하는데 사용할 타입을 선언한다
    public enum State
    {
        Ready, // 발사 준비됨
        Empty, // 탄창이 빔
        Reloading // 재장전 중
    }

    public State state { get; private set; } // 현재 총의 상태

    //public Transform fireTransform; // 총알이 발사될 위치

    public Transform PunchTransform;//펀치 위치
    public Rigidbody PunchHand;//펀치물리;

    public ParticleSystem muzzleFlashEffect; // 총구 화염 효과
    //public ParticleSystem shellEjectEffect; // 탄피 배출 효과

    //private LineRenderer bulletLineRenderer; // 총알 궤적을 그리기 위한 렌더러

    private AudioSource PunchAudioPlayer; // 총 소리 재생기
    //public AudioClip shotClip; // 발사 소리
    public AudioClip PunchClip;//펀치 소리
    //public AudioClip reloadClip; // 재장전 소리

    //public GunData gunData;

    public float damage = 25; // 공격력
    //private float fireDistance = 50f; // 사정거리
    private float PunchDistance = 5f;//펀치사정거리

    //public int ammoRemain = 100; // 남은 전체 탄약
    //public int magCapacity = 25; // 탄창 용량
    //public int magAmmo; // 현재 탄창에 남아있는 탄약


    //public float timeBetFire = 0.12f; // 총알 발사 간격
    //public float reloadTime = 1.8f; // 재장전 소요 시간
    //private float lastFireTime; // 총을 마지막으로 발사한 시점


    private void Awake()
    {
        // 사용할 컴포넌트들의 참조를 가져오기
        PunchAudioPlayer = GetComponent<AudioSource>();
        //bulletLineRenderer = GetComponent<LineRenderer>();
        //bulletLineRenderer.positionCount = 2;
        //bulletLineRenderer.enabled = false;
    }

    private void OnEnable()
    {
        //총 상태 초기화
       //ammoRemain = gunData.startAmmoRemain;
       // magAmmo = gunData.magCapacity;

        state = State.Ready;
        //lastFireTime = 0;

    }

    // 발사 시도
    public void FirePunch()
    {
        PunchAttack();
    }

    // 실제 발사 처리
    //private void Shot()
    //{
    //    RaycastHit hit;
    //    Vector3 hitPosition = Vector3.zero;

    //    if (Physics.Raycast(fireTransform.position, fireTransform.forward, out hit, fireDistance))
    //    {
    //        IDamageable target = hit.collider.GetComponent<IDamageable>();
    //        if (target != null)
    //        {
    //            target.OnDamage(gunData.damage, hit.point, hit.normal);
    //        }

    //        hitPosition = hit.point;
    //    }
    //    else
    //    {
    //        hitPosition = fireTransform.position + fireTransform.forward * fireDistance;
    //    }

    //    StartCoroutine(ShotEffect(hitPosition));
    //    magAmmo--;
    //    if (magAmmo <= 0)
    //    {
    //        state = State.Empty;
    //    }
    //}

    private void PunchAttack()
    {
        RaycastHit hit;
        Vector3 hitPosition = Vector3.zero;

        if (Physics.Raycast(PunchTransform.position, PunchTransform.forward, out hit, PunchDistance))
        {
            IDamageable target = hit.collider.GetComponent<IDamageable>();
            if (target != null)
            {
                target.OnDamage(damage, hit.point, hit.normal);
            }

            hitPosition = hit.point;
        }

        //else
        //{
        //    hitPosition = fireTransform.position + fireTransform.forward * fireDistance;
        //}

       
        StartCoroutine(PunchEffect(hitPosition));
        //magAmmo--;
        //if (magAmmo <= 0)
        //{
        //    state = State.Empty;
        //}
    }

    // 발사 이펙트와 소리를 재생하고 총알 궤적을 그린다
    //private IEnumerator ShotEffect(Vector3 hitPosition)
    //{
    //    muzzleFlashEffect.Play();



    //    gunAudioPlayer.PlayOneShot(gunData.shotClip);//=> 겹침
    //    bulletLineRenderer.SetPosition(0, fireTransform.position);
    //    bulletLineRenderer.SetPosition(1, hitPosition);

    //    // 라인 렌더러를 활성화하여 총알 궤적을 그린다
    //    bulletLineRenderer.enabled = true;

    //    // 0.03초 동안 잠시 처리를 대기
    //    yield return new WaitForSeconds(0.03f);
    //    //yield return null; => 한 프레임 쉬어라

    //    // 라인 렌더러를 비활성화하여 총알 궤적을 지운다0
    //    bulletLineRenderer.enabled = false;
    //}

    private IEnumerator PunchEffect(Vector3 hitPosition)
    {
      
    


       
      

      

        // 0.03초 동안 잠시 처리를 대기
        yield return new WaitForSeconds(0.03f);
        //yield return null; => 한 프레임 쉬어라

      
    }



    //// 재장전 시도
    //public bool Reload()
    //{
    //    if (state == State.Reloading || ammoRemain <= 0 || magAmmo >= gunData.magCapacity)
    //    {
    //        return false;
    //    }

    //    StartCoroutine(ReloadRoutine());
    //    return true;
    //}

    // 실제 재장전 처리를 진행
    //private IEnumerator ReloadRoutine()
    //{
    //    // 현재 상태를 재장전 중 상태로 전환
    //    state = State.Reloading;

    //    gunAudioPlayer.PlayOneShot(gunData.reloadClip);

    //    // 재장전 소요 시간 만큼 처리를 쉬기
    //    yield return new WaitForSeconds(reloadTime);

    //    int ammoToFill = gunData.magCapacity - magAmmo;
    //    if (ammoRemain < ammoToFill)
    //    {
    //        ammoToFill = ammoRemain;
    //    }

    //    magAmmo += ammoToFill;
    //    ammoRemain -= ammoToFill;

    //    // 총의 현재 상태를 발사 준비된 상태로 변경
    //    state = State.Ready;
    //}
}